// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buffer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GomokuBuffer {

  /// <summary>Holder for reflection information generated from buffer.proto</summary>
  public static partial class BufferReflection {

    #region Descriptor
    /// <summary>File descriptor for buffer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BufferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxidWZmZXIucHJvdG8SDGdvbW9rdUJ1ZmZlciIsCgROb2RlEgkKAVgYASAB",
            "KAUSCQoBWRgCIAEoBRIOCgZQbGF5ZXIYAyABKAUi+wEKC0NvbmZpZ1J1bGVz",
            "EhUKDVBsYXllckluZGV4SUEYASABKAUSHQoVSXNBY3RpdmVSdWxlRnJlZVRo",
            "cmVlGAIgASgIEhsKE0lzQWN0aXZlUnVsZUNhcHR1cmUYAyABKAgSHQoVSXNB",
            "Y3RpdmVSdWxlQWxpZ25tZW50GAQgASgIEhcKD0lzQWN0aXZlUnVsZVdpbhgF",
            "IAEoCBIZChFJc0FjdGl2ZVJ1bGVCbG9jaxgGIAEoCBIjChtJc0FjdGl2ZVJ1",
            "bGVQcm9iYWJsZUNhcHR1cmUYByABKAgSIQoZSXNBY3RpdmVSdWxlQW1iaWVu",
            "dFNlYXJjaBgIIAEoCCJZCg1DREdhbWVSZXF1ZXN0Eg4KBkdhbWVJRBgBIAEo",
            "CRIoCgVSdWxlcxgCIAEoCzIZLmdvbW9rdUJ1ZmZlci5Db25maWdSdWxlcxIO",
            "CgZEZWxldGUYAyABKAgijAEKEkNoZWNrUnVsZXNSZXNwb25zZRISCgpJc1Bv",
            "c3NpYmxlGAEgASgIEiQKCENhcHR1cmVkGAIgAygLMhIuZ29tb2t1QnVmZmVy",
            "Lk5vZGUSGAoQTmJTdG9uZWRDYXB0dXJlZBgDIAEoBRITCgtQYXJ0eUZpbmlz",
            "aBgEIAEoCBINCgVJc1dpbhgFIAEoBSI0Cg5DREdhbWVSZXNwb25zZRIRCglJ",
            "c1N1Y2Nlc3MYASABKAgSDwoHTWVzc2FnZRgCIAEoCSJMCgtTdG9uZVBsYXll",
            "ZBItChFDdXJyZW50UGxheWVyTW92ZRgBIAEoCzISLmdvbW9rdUJ1ZmZlci5O",
            "b2RlEg4KBkdhbWVJRBgCIAEoCTLcAQoER2FtZRJFCgZDREdhbWUSGy5nb21v",
            "a3VCdWZmZXIuQ0RHYW1lUmVxdWVzdBocLmdvbW9rdUJ1ZmZlci5DREdhbWVS",
            "ZXNwb25zZSIAEkAKBlBsYXllZBIZLmdvbW9rdUJ1ZmZlci5TdG9uZVBsYXll",
            "ZBoZLmdvbW9rdUJ1ZmZlci5TdG9uZVBsYXllZCIAEksKCkNoZWNrUnVsZXMS",
            "GS5nb21va3VCdWZmZXIuU3RvbmVQbGF5ZWQaIC5nb21va3VCdWZmZXIuQ2hl",
            "Y2tSdWxlc1Jlc3BvbnNlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.Node), global::GomokuBuffer.Node.Parser, new[]{ "X", "Y", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.ConfigRules), global::GomokuBuffer.ConfigRules.Parser, new[]{ "PlayerIndexIA", "IsActiveRuleFreeThree", "IsActiveRuleCapture", "IsActiveRuleAlignment", "IsActiveRuleWin", "IsActiveRuleBlock", "IsActiveRuleProbableCapture", "IsActiveRuleAmbientSearch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.CDGameRequest), global::GomokuBuffer.CDGameRequest.Parser, new[]{ "GameID", "Rules", "Delete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.CheckRulesResponse), global::GomokuBuffer.CheckRulesResponse.Parser, new[]{ "IsPossible", "Captured", "NbStonedCaptured", "PartyFinish", "IsWin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.CDGameResponse), global::GomokuBuffer.CDGameResponse.Parser, new[]{ "IsSuccess", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GomokuBuffer.StonePlayed), global::GomokuBuffer.StonePlayed.Parser, new[]{ "CurrentPlayerMove", "GameID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      player_ = other.player_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Player != other.Player) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Player = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigRules : pb::IMessage<ConfigRules> {
    private static readonly pb::MessageParser<ConfigRules> _parser = new pb::MessageParser<ConfigRules>(() => new ConfigRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRules(ConfigRules other) : this() {
      playerIndexIA_ = other.playerIndexIA_;
      isActiveRuleFreeThree_ = other.isActiveRuleFreeThree_;
      isActiveRuleCapture_ = other.isActiveRuleCapture_;
      isActiveRuleAlignment_ = other.isActiveRuleAlignment_;
      isActiveRuleWin_ = other.isActiveRuleWin_;
      isActiveRuleBlock_ = other.isActiveRuleBlock_;
      isActiveRuleProbableCapture_ = other.isActiveRuleProbableCapture_;
      isActiveRuleAmbientSearch_ = other.isActiveRuleAmbientSearch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRules Clone() {
      return new ConfigRules(this);
    }

    /// <summary>Field number for the "PlayerIndexIA" field.</summary>
    public const int PlayerIndexIAFieldNumber = 1;
    private int playerIndexIA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndexIA {
      get { return playerIndexIA_; }
      set {
        playerIndexIA_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleFreeThree" field.</summary>
    public const int IsActiveRuleFreeThreeFieldNumber = 2;
    private bool isActiveRuleFreeThree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleFreeThree {
      get { return isActiveRuleFreeThree_; }
      set {
        isActiveRuleFreeThree_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleCapture" field.</summary>
    public const int IsActiveRuleCaptureFieldNumber = 3;
    private bool isActiveRuleCapture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleCapture {
      get { return isActiveRuleCapture_; }
      set {
        isActiveRuleCapture_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleAlignment" field.</summary>
    public const int IsActiveRuleAlignmentFieldNumber = 4;
    private bool isActiveRuleAlignment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleAlignment {
      get { return isActiveRuleAlignment_; }
      set {
        isActiveRuleAlignment_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleWin" field.</summary>
    public const int IsActiveRuleWinFieldNumber = 5;
    private bool isActiveRuleWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleWin {
      get { return isActiveRuleWin_; }
      set {
        isActiveRuleWin_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleBlock" field.</summary>
    public const int IsActiveRuleBlockFieldNumber = 6;
    private bool isActiveRuleBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleBlock {
      get { return isActiveRuleBlock_; }
      set {
        isActiveRuleBlock_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleProbableCapture" field.</summary>
    public const int IsActiveRuleProbableCaptureFieldNumber = 7;
    private bool isActiveRuleProbableCapture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleProbableCapture {
      get { return isActiveRuleProbableCapture_; }
      set {
        isActiveRuleProbableCapture_ = value;
      }
    }

    /// <summary>Field number for the "IsActiveRuleAmbientSearch" field.</summary>
    public const int IsActiveRuleAmbientSearchFieldNumber = 8;
    private bool isActiveRuleAmbientSearch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveRuleAmbientSearch {
      get { return isActiveRuleAmbientSearch_; }
      set {
        isActiveRuleAmbientSearch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndexIA != other.PlayerIndexIA) return false;
      if (IsActiveRuleFreeThree != other.IsActiveRuleFreeThree) return false;
      if (IsActiveRuleCapture != other.IsActiveRuleCapture) return false;
      if (IsActiveRuleAlignment != other.IsActiveRuleAlignment) return false;
      if (IsActiveRuleWin != other.IsActiveRuleWin) return false;
      if (IsActiveRuleBlock != other.IsActiveRuleBlock) return false;
      if (IsActiveRuleProbableCapture != other.IsActiveRuleProbableCapture) return false;
      if (IsActiveRuleAmbientSearch != other.IsActiveRuleAmbientSearch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndexIA != 0) hash ^= PlayerIndexIA.GetHashCode();
      if (IsActiveRuleFreeThree != false) hash ^= IsActiveRuleFreeThree.GetHashCode();
      if (IsActiveRuleCapture != false) hash ^= IsActiveRuleCapture.GetHashCode();
      if (IsActiveRuleAlignment != false) hash ^= IsActiveRuleAlignment.GetHashCode();
      if (IsActiveRuleWin != false) hash ^= IsActiveRuleWin.GetHashCode();
      if (IsActiveRuleBlock != false) hash ^= IsActiveRuleBlock.GetHashCode();
      if (IsActiveRuleProbableCapture != false) hash ^= IsActiveRuleProbableCapture.GetHashCode();
      if (IsActiveRuleAmbientSearch != false) hash ^= IsActiveRuleAmbientSearch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndexIA != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndexIA);
      }
      if (IsActiveRuleFreeThree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsActiveRuleFreeThree);
      }
      if (IsActiveRuleCapture != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActiveRuleCapture);
      }
      if (IsActiveRuleAlignment != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsActiveRuleAlignment);
      }
      if (IsActiveRuleWin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsActiveRuleWin);
      }
      if (IsActiveRuleBlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsActiveRuleBlock);
      }
      if (IsActiveRuleProbableCapture != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsActiveRuleProbableCapture);
      }
      if (IsActiveRuleAmbientSearch != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsActiveRuleAmbientSearch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndexIA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndexIA);
      }
      if (IsActiveRuleFreeThree != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleCapture != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleAlignment != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleWin != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleBlock != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleProbableCapture != false) {
        size += 1 + 1;
      }
      if (IsActiveRuleAmbientSearch != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigRules other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndexIA != 0) {
        PlayerIndexIA = other.PlayerIndexIA;
      }
      if (other.IsActiveRuleFreeThree != false) {
        IsActiveRuleFreeThree = other.IsActiveRuleFreeThree;
      }
      if (other.IsActiveRuleCapture != false) {
        IsActiveRuleCapture = other.IsActiveRuleCapture;
      }
      if (other.IsActiveRuleAlignment != false) {
        IsActiveRuleAlignment = other.IsActiveRuleAlignment;
      }
      if (other.IsActiveRuleWin != false) {
        IsActiveRuleWin = other.IsActiveRuleWin;
      }
      if (other.IsActiveRuleBlock != false) {
        IsActiveRuleBlock = other.IsActiveRuleBlock;
      }
      if (other.IsActiveRuleProbableCapture != false) {
        IsActiveRuleProbableCapture = other.IsActiveRuleProbableCapture;
      }
      if (other.IsActiveRuleAmbientSearch != false) {
        IsActiveRuleAmbientSearch = other.IsActiveRuleAmbientSearch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndexIA = input.ReadInt32();
            break;
          }
          case 16: {
            IsActiveRuleFreeThree = input.ReadBool();
            break;
          }
          case 24: {
            IsActiveRuleCapture = input.ReadBool();
            break;
          }
          case 32: {
            IsActiveRuleAlignment = input.ReadBool();
            break;
          }
          case 40: {
            IsActiveRuleWin = input.ReadBool();
            break;
          }
          case 48: {
            IsActiveRuleBlock = input.ReadBool();
            break;
          }
          case 56: {
            IsActiveRuleProbableCapture = input.ReadBool();
            break;
          }
          case 64: {
            IsActiveRuleAmbientSearch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDGameRequest : pb::IMessage<CDGameRequest> {
    private static readonly pb::MessageParser<CDGameRequest> _parser = new pb::MessageParser<CDGameRequest>(() => new CDGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameRequest(CDGameRequest other) : this() {
      gameID_ = other.gameID_;
      rules_ = other.rules_ != null ? other.rules_.Clone() : null;
      delete_ = other.delete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameRequest Clone() {
      return new CDGameRequest(this);
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private string gameID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameID {
      get { return gameID_; }
      set {
        gameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rules" field.</summary>
    public const int RulesFieldNumber = 2;
    private global::GomokuBuffer.ConfigRules rules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GomokuBuffer.ConfigRules Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "Delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    private bool delete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delete {
      get { return delete_; }
      set {
        delete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (!object.Equals(Rules, other.Rules)) return false;
      if (Delete != other.Delete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID.Length != 0) hash ^= GameID.GetHashCode();
      if (rules_ != null) hash ^= Rules.GetHashCode();
      if (Delete != false) hash ^= Delete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameID);
      }
      if (rules_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rules);
      }
      if (Delete != false) {
        output.WriteRawTag(24);
        output.WriteBool(Delete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameID);
      }
      if (rules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rules);
      }
      if (Delete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.GameID.Length != 0) {
        GameID = other.GameID;
      }
      if (other.rules_ != null) {
        if (rules_ == null) {
          rules_ = new global::GomokuBuffer.ConfigRules();
        }
        Rules.MergeFrom(other.Rules);
      }
      if (other.Delete != false) {
        Delete = other.Delete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameID = input.ReadString();
            break;
          }
          case 18: {
            if (rules_ == null) {
              rules_ = new global::GomokuBuffer.ConfigRules();
            }
            input.ReadMessage(rules_);
            break;
          }
          case 24: {
            Delete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckRulesResponse : pb::IMessage<CheckRulesResponse> {
    private static readonly pb::MessageParser<CheckRulesResponse> _parser = new pb::MessageParser<CheckRulesResponse>(() => new CheckRulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckRulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRulesResponse(CheckRulesResponse other) : this() {
      isPossible_ = other.isPossible_;
      captured_ = other.captured_.Clone();
      nbStonedCaptured_ = other.nbStonedCaptured_;
      partyFinish_ = other.partyFinish_;
      isWin_ = other.isWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRulesResponse Clone() {
      return new CheckRulesResponse(this);
    }

    /// <summary>Field number for the "IsPossible" field.</summary>
    public const int IsPossibleFieldNumber = 1;
    private bool isPossible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPossible {
      get { return isPossible_; }
      set {
        isPossible_ = value;
      }
    }

    /// <summary>Field number for the "Captured" field.</summary>
    public const int CapturedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GomokuBuffer.Node> _repeated_captured_codec
        = pb::FieldCodec.ForMessage(18, global::GomokuBuffer.Node.Parser);
    private readonly pbc::RepeatedField<global::GomokuBuffer.Node> captured_ = new pbc::RepeatedField<global::GomokuBuffer.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GomokuBuffer.Node> Captured {
      get { return captured_; }
    }

    /// <summary>Field number for the "NbStonedCaptured" field.</summary>
    public const int NbStonedCapturedFieldNumber = 3;
    private int nbStonedCaptured_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbStonedCaptured {
      get { return nbStonedCaptured_; }
      set {
        nbStonedCaptured_ = value;
      }
    }

    /// <summary>Field number for the "PartyFinish" field.</summary>
    public const int PartyFinishFieldNumber = 4;
    private bool partyFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartyFinish {
      get { return partyFinish_; }
      set {
        partyFinish_ = value;
      }
    }

    /// <summary>Field number for the "IsWin" field.</summary>
    public const int IsWinFieldNumber = 5;
    private int isWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckRulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckRulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPossible != other.IsPossible) return false;
      if(!captured_.Equals(other.captured_)) return false;
      if (NbStonedCaptured != other.NbStonedCaptured) return false;
      if (PartyFinish != other.PartyFinish) return false;
      if (IsWin != other.IsWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsPossible != false) hash ^= IsPossible.GetHashCode();
      hash ^= captured_.GetHashCode();
      if (NbStonedCaptured != 0) hash ^= NbStonedCaptured.GetHashCode();
      if (PartyFinish != false) hash ^= PartyFinish.GetHashCode();
      if (IsWin != 0) hash ^= IsWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPossible != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPossible);
      }
      captured_.WriteTo(output, _repeated_captured_codec);
      if (NbStonedCaptured != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NbStonedCaptured);
      }
      if (PartyFinish != false) {
        output.WriteRawTag(32);
        output.WriteBool(PartyFinish);
      }
      if (IsWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPossible != false) {
        size += 1 + 1;
      }
      size += captured_.CalculateSize(_repeated_captured_codec);
      if (NbStonedCaptured != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbStonedCaptured);
      }
      if (PartyFinish != false) {
        size += 1 + 1;
      }
      if (IsWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsWin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckRulesResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsPossible != false) {
        IsPossible = other.IsPossible;
      }
      captured_.Add(other.captured_);
      if (other.NbStonedCaptured != 0) {
        NbStonedCaptured = other.NbStonedCaptured;
      }
      if (other.PartyFinish != false) {
        PartyFinish = other.PartyFinish;
      }
      if (other.IsWin != 0) {
        IsWin = other.IsWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPossible = input.ReadBool();
            break;
          }
          case 18: {
            captured_.AddEntriesFrom(input, _repeated_captured_codec);
            break;
          }
          case 24: {
            NbStonedCaptured = input.ReadInt32();
            break;
          }
          case 32: {
            PartyFinish = input.ReadBool();
            break;
          }
          case 40: {
            IsWin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDGameResponse : pb::IMessage<CDGameResponse> {
    private static readonly pb::MessageParser<CDGameResponse> _parser = new pb::MessageParser<CDGameResponse>(() => new CDGameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameResponse(CDGameResponse other) : this() {
      isSuccess_ = other.isSuccess_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDGameResponse Clone() {
      return new CDGameResponse(this);
    }

    /// <summary>Field number for the "IsSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 1;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDGameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDGameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccess != other.IsSuccess) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccess);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDGameResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StonePlayed : pb::IMessage<StonePlayed> {
    private static readonly pb::MessageParser<StonePlayed> _parser = new pb::MessageParser<StonePlayed>(() => new StonePlayed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StonePlayed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StonePlayed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StonePlayed(StonePlayed other) : this() {
      currentPlayerMove_ = other.currentPlayerMove_ != null ? other.currentPlayerMove_.Clone() : null;
      gameID_ = other.gameID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StonePlayed Clone() {
      return new StonePlayed(this);
    }

    /// <summary>Field number for the "CurrentPlayerMove" field.</summary>
    public const int CurrentPlayerMoveFieldNumber = 1;
    private global::GomokuBuffer.Node currentPlayerMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GomokuBuffer.Node CurrentPlayerMove {
      get { return currentPlayerMove_; }
      set {
        currentPlayerMove_ = value;
      }
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private string gameID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameID {
      get { return gameID_; }
      set {
        gameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StonePlayed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StonePlayed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentPlayerMove, other.CurrentPlayerMove)) return false;
      if (GameID != other.GameID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentPlayerMove_ != null) hash ^= CurrentPlayerMove.GetHashCode();
      if (GameID.Length != 0) hash ^= GameID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentPlayerMove_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentPlayerMove);
      }
      if (GameID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentPlayerMove_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentPlayerMove);
      }
      if (GameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StonePlayed other) {
      if (other == null) {
        return;
      }
      if (other.currentPlayerMove_ != null) {
        if (currentPlayerMove_ == null) {
          currentPlayerMove_ = new global::GomokuBuffer.Node();
        }
        CurrentPlayerMove.MergeFrom(other.CurrentPlayerMove);
      }
      if (other.GameID.Length != 0) {
        GameID = other.GameID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentPlayerMove_ == null) {
              currentPlayerMove_ = new global::GomokuBuffer.Node();
            }
            input.ReadMessage(currentPlayerMove_);
            break;
          }
          case 18: {
            GameID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
